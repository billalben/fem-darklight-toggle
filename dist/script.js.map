{"version":3,"sources":["script.js"],"names":["darkButton","document","getElementById","lightButton","darkLabel","querySelector","lightLabel","setDarkMode","classList","remove","add","style","display","localStorage","setItem","setLightMode","colorModeFromLocalStorage","getItem","colorModeFromPreferences","window","matchMedia","matches","loadAndUpdateColor","click","radioButtons","querySelectorAll","forEach","button","addEventListener","event","checked"],"mappings":"AAAA,aAAA,IAAMA,WAAaC,SAASC,eAAe,QACrCC,YAAcF,SAASC,eAAe,SAEtCE,UAAYH,SAASI,cAAc,qBACnCC,WAAaL,SAASI,cAAc,sBAEpCE,YAAc,WAClBN,SAASI,cAAc,QAAQG,UAAUC,OAAO,SAChDR,SAASI,cAAc,QAAQG,UAAUE,IAAI,QAE7CN,UAAUO,MAAMC,QAAU,OAC1BN,WAAWK,MAAMC,QAAU,QAE3BC,aAAaC,QAAQ,YAAa,OACpC,EAEMC,aAAe,WACnBd,SAASI,cAAc,QAAQG,UAAUC,OAAO,QAChDR,SAASI,cAAc,QAAQG,UAAUE,IAAI,SAE7CJ,WAAWK,MAAMC,QAAU,OAC3BR,UAAUO,MAAMC,QAAU,QAC1BC,aAAaC,QAAQ,YAAa,QACpC,EAEME,0BAA4B,WAChC,OAAOH,aAAaI,QAAQ,YAC9B,EAEMC,yBAA2B,WAC/B,OAAOC,OAAOC,WAAW,gCAAgCC,QACrD,OACA,OACN,EAEMC,mBAAqB,WAGf,UADIN,6BAA+BE,4BAC1BlB,WAAWuB,QAAUpB,YAAYoB,OACtD,EAGMC,aAAevB,SAASwB,iBAAiB,0BAC/CD,aAAaE,SAAQ,SAACC,GACpBA,EAAOC,iBAAiB,SAAS,SAACC,GAChC7B,WAAW8B,QAAUvB,cAAgBQ,cACvC,GACF,IAIAI,OACGC,WAAW,gCACXQ,iBAAiB,UAAU,SAACC,GAC3BA,EAAMR,QAAUrB,WAAWuB,QAAUpB,YAAYoB,OACnD,IAGFD","file":"script.js","sourcesContent":["const darkButton = document.getElementById(\"dark\");\nconst lightButton = document.getElementById(\"light\");\n\nconst darkLabel = document.querySelector(\"label[for='dark']\");\nconst lightLabel = document.querySelector(\"label[for='light']\");\n\nconst setDarkMode = () => {\n  document.querySelector(\"body\").classList.remove(\"light\");\n  document.querySelector(\"body\").classList.add(\"dark\");\n\n  darkLabel.style.display = \"none\";\n  lightLabel.style.display = \"block\";\n\n  localStorage.setItem(\"colorMode\", \"dark\");\n};\n\nconst setLightMode = () => {\n  document.querySelector(\"body\").classList.remove(\"dark\");\n  document.querySelector(\"body\").classList.add(\"light\");\n\n  lightLabel.style.display = \"none\";\n  darkLabel.style.display = \"block\";\n  localStorage.setItem(\"colorMode\", \"light\");\n};\n\nconst colorModeFromLocalStorage = () => {\n  return localStorage.getItem(\"colorMode\");\n};\n\nconst colorModeFromPreferences = () => {\n  return window.matchMedia(\"(prefers-color-scheme: dark)\").matches\n    ? \"dark\"\n    : \"light\"; // If preference is set or does not match anything (light is default)\n};\n\nconst loadAndUpdateColor = () => {\n  // local storage has precedence over the prefers-color-scheme\n  const color = colorModeFromLocalStorage() || colorModeFromPreferences();\n  color === \"dark\" ? darkButton.click() : lightButton.click();\n};\n\n// when the inputs are clicked, check which radio button is checked and change the color\nconst radioButtons = document.querySelectorAll(\".toggle__wrapper input\");\nradioButtons.forEach((button) => {\n  button.addEventListener(\"click\", (event) => {\n    darkButton.checked ? setDarkMode() : setLightMode();\n  });\n});\n\n// when the prefers-color-scheme changes, this event will be emitted\n// event reflects the media query, if it matches, the new color is dark, else it is light\nwindow\n  .matchMedia(\"(prefers-color-scheme: dark)\")\n  .addEventListener(\"change\", (event) => {\n    event.matches ? darkButton.click() : lightButton.click();\n  });\n\n// Load the right color on startup - localStorage has precedence\nloadAndUpdateColor();\n"]}